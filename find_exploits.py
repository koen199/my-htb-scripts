
import xml.etree.ElementTree as ET
import requests
import os
import json
import pandas as pd

def convert_to_23_format(cpe: str) -> str:
    """
    Convert CPE 2.2 format to CPE 2.3 format
    Example: cpe:/a:apache:http_server:2.4.18 -> cpe:2.3:a:apache:http_server:2.4.18:*:*:*:*:*:*:*
    """
    if not cpe.startswith('cpe:/'):
        return cpe  # Already in 2.3 format or invalid
    
    # Remove the 'cpe:/' prefix
    parts = cpe[5:].split(':')
    
    # Ensure we have at least the part (a, h, o)
    if len(parts) < 1:
        return cpe
    
    # CPE 2.3 format: cpe:2.3:part:vendor:product:version:update:edition:language:sw_edition:target_sw:target_hw:other
    # Fill missing parts with '*' (any value)
    while len(parts) < 11:
        parts.append('*')
    
    # Construct CPE 2.3 format
    cpe_23 = 'cpe:2.3:' + ':'.join(parts[:11])
    return cpe_23


def find_cpe_from_nmap_scan()->list[str]:
    tree = ET.parse('nmap_result/with_scripts_result/common_ports.xml')
    root = tree.getroot()
    cpe_list = root.findall('.//cpe')
    cpe_list = [cpe.text for cpe in cpe_list]
    return [convert_to_23_format(cpe) for cpe in cpe_list]

def find_exploits_for_cpe(cpe:str)->dict:
    url = f'https://services.nvd.nist.gov/rest/json/cves/2.0'
    response = requests.get(url, params={'cpeName': cpe})
    if not response.ok:        
        print(f'Error finding exploits for {cpe}, status_code = {response.status_code}')
        return {}
    content = response.json()
    return content

   
def add_newlines_every_x_words(text, x):
    words = text.split()
    lines = [' '.join(words[i:i+x]) for i in range(0, len(words), x)]
    return '\n'.join(lines)

def get_base_severities(vulnerability:dict):
    all_severities = []
    for version, value in vulnerability['cve']['metrics'].items():
        if version == 'cvssMetricV31':
            severities = [s['cvssData']['baseSeverity'] for s in value]
        elif version == 'cvssMetricV30':
            severities = [s['cvssData']['baseSeverity'] for s in value]
        elif version == 'cvssMetricV2':
            severities = [s['baseSeverity'] for s in value]
        else:
            print(f'Not sure how to parse {version} score')
            continue
        all_severities += severities
    return severities

def improve_readability(exploits:dict):
    all_content = ''
    
    for vulnerability in exploits['vulnerabilities']:
        description = vulnerability['cve']['descriptions'][0]['value']
        severities = get_base_severities(vulnerability)

        description = add_newlines_every_x_words(description, 15)
        content = f"""
{vulnerability['cve']['id']}
baseSeverity: {','.join(severities)}
{description}

"""
        all_content += content
    return all_content

cpe_list = find_cpe_from_nmap_scan()
for cpe in cpe_list:
    folder_name = cpe.replace('*', '').replace(':', '_')
    full_path = f'exploits/{folder_name}'
    os.makedirs(full_path, exist_ok=True)
    exploits = find_exploits_for_cpe(cpe)
    if not exploits:
        #do nothing on empty dict
        continue
    with open(f'{full_path}/cve.json', 'w') as fh:
        fh.write(json.dumps(exploits))
    with open(f'{full_path}/cve_minimal.txt', 'w') as fh:
        readable = improve_readability(exploits)
        fh.write(readable)    